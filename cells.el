(setq rule-30 '(("000" . "0")   ; 1
		("001" . "1")   ; 2
		("010" . "1")   ; 4
		("011" . "1")   ; 8
		("100" . "1")   ; 16
		("101" . "0")   ; 32
		("110" . "0")   ; 64
		("111" . "0"))) ; 128


(defun apply-rule (neighborhood rule)
  "Return cell state by applying rule to three-cell neighborhood"
  (cdr (assoc neighborhood rule)))


(defun next-gen (gen rule)
  "Apply rule to row to produce next generation row!"
  (let ((new "")
	(old (concat (string (elt gen (- (length gen) 1)))
		     gen
		     (string (elt gen 0)))))
    (dotimes (i (- (length old) 2))
      (setq new (concat new (apply-rule (format "%s%s%s"
						(string (elt old i))
						(string (elt old (+ i 1)))
						(string (elt old (+ i 2))))
					rule))))
    new))


;; an initial row
(setq aguas "0000000000000000000000000000000000001000000000000000000000000000000000000")

;; do 30 rows
(dotimes (i 30)
  (insert (format "%s\n" aguas))
  (setq aguas (next-gen aguas rule-30)))


;; 0000000000000000000000000000000000001000000000000000000000000000000000000
;; 0000000000000000000000000000000000011100000000000000000000000000000000000
;; 0000000000000000000000000000000000110010000000000000000000000000000000000
;; 0000000000000000000000000000000001101111000000000000000000000000000000000
;; 0000000000000000000000000000000011001000100000000000000000000000000000000
;; 0000000000000000000000000000000110111101110000000000000000000000000000000
;; 0000000000000000000000000000001100100001001000000000000000000000000000000
;; 0000000000000000000000000000011011110011111100000000000000000000000000000
;; 0000000000000000000000000000110010001110000010000000000000000000000000000
;; 0000000000000000000000000001101111011001000111000000000000000000000000000
;; 0000000000000000000000000011001000010111101100100000000000000000000000000
;; 0000000000000000000000000110111100110100001011110000000000000000000000000
;; 0000000000000000000000001100100011100110011010001000000000000000000000000
;; 0000000000000000000000011011110110011101110011011100000000000000000000000
;; 0000000000000000000000110010000101110001001110010010000000000000000000000
;; 0000000000000000000001101111001101001011111001111111000000000000000000000
;; 0000000000000000000011001000111001111010000111000000100000000000000000000
;; 0000000000000000000110111101100111000011001100100001110000000000000000000
;; 0000000000000000001100100001011100100110111011110011001000000000000000000
;; 0000000000000000011011110011010011111100100010001110111100000000000000000
;; 0000000000000000110010001110011110000011110111011000100010000000000000000
;; 0000000000000001101111011001110001000110000100010101110111000000000000000
;; 0000000000000011001000010111001011101101001110110101000100100000000000000
;; 0000000000000110111100110100111010001001111000100101101111110000000000000
;; 0000000000001100100011100111100011011111000101111101001000001000000000000
;; 0000000000011011110110011100010110010000101101000001111100011100000000000
;; 0000000000110010000101110010110101111001101001100011000010110010000000000
;; 0000000001101111001101001110100101000111001111010110100110101111000000000
;; 0000000011001000111001111000111101101100111000010100111100101000100000000
;; 0000000110111101100111000101100001001011100100110111100011101101110000000
